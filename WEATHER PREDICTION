Temperature,Humidity,WindSpeed,Weather
30,65,12,Sunny
25,80,10,Rainy
20,90,5,Rainy
35,40,20,Sunny
22,85,7,Cloudy
28,70,15,Sunny
18,95,4,Rainy
24,75,6,Cloudy
31,60,10,Sunny
26,82,12,Rainy
23,78,5,Cloudy
33,55,18,Sunny
19,88,3,Rainy
29,68,14,Sunny
21,86,6,Cloudy
27,72,11,Sunny
17,92,4,Rainy
32,58,17,Sunny
20,84,5,Cloudy
25,79,8,Rainy
# Weather Prediction using ML
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

# Load Dataset
df = pd.read_csv("weather.csv")  # Upload your dataset
df = df.dropna()

# Label Encoding
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['Weather'] = le.fit_transform(df['Weather'])

# Features and Target
X = df[['Temperature', 'Humidity', 'WindSpeed']]
y = df['Weather']

# Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Model
model = DecisionTreeClassifier()
model.fit(X_train, y_train)

# Accuracy
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))

# Predict Function
def predict_weather(temp, humidity, wind):
    pred = model.predict([[temp, humidity, wind]])
    return le.inverse_transform(pred)[0]
import joblib
joblib.dump(model, "weather_model.pkl")
joblib.dump(le, "label_encoder.pkl")
from google.colab import files
files.download('weather_model.pkl')
files.download('label_encoder.pkl')
<!DOCTYPE html>
<html>
<head>
  <title>Weather Predictor</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <div class="container">
    <h1>Weather Predictor</h1>
    <form id="weatherForm">
      <input type="number" step="any" id="temp" placeholder="Temperature (Â°C)" required>
      <input type="number" step="any" id="humidity" placeholder="Humidity (%)" required>
      <input type="number" step="any" id="wind" placeholder="Wind Speed (km/h)" required>
      <button type="submit">Predict</button>
    </form>
    <div id="result"></div>
  </div>

  <script>
    const form = document.getElementById('weatherForm');
    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      const temp = document.getElementById('temp').value;
      const humidity = document.getElementById('humidity').value;
      const wind = document.getElementById('wind').value;

      const response = await fetch('http://localhost:5000/predict', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ temp, humidity, wind })
      });

      const data = await response.json();
      document.getElementById('result').innerText = "Predicted Weather: " + data.result;
    });
  </script>
</body>
</html>
body {
  background: #f0f8ff;
  font-family: Arial;
  text-align: center;
}
.container {
  margin: 50px auto;
  width: 300px;
  padding: 20px;
  background: #e6f7ff;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
}
input, button {
  margin: 10px;
  padding: 10px;
  width: 90%;
}
button {
  background-color: #007acc;
  color: white;
  border: none;
  cursor: pointer;
}
#result {
  margin-top: 20px;
  font-weight: bold;
}
from flask import Flask, request, jsonify
import joblib

app = Flask(__name__)
model = joblib.load("weather_model.pkl")
le = joblib.load("label_encoder.pkl")

@app.route('/predict', methods=['POST'])
def predict():
    data = request.json
    temp = float(data['temp'])
    humidity = float(data['humidity'])
    wind = float(data['wind'])

    prediction = model.predict([[temp, humidity, wind]])
    result = le.inverse_transform(prediction)[0]
    return jsonify({'result': result})

if __name__ == '__main__':
    app.run(debug=True)
